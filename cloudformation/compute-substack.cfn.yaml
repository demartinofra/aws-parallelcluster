---
{% set queues =
{ "queue1": {
    "instances": [{"type": "c5.xlarge", "min_size": 1}, {"type": "c5.2xlarge", "min_size": 2}],
    "placement_group": false
  },
  "queue2": {
    "instances": [{"type": "g3.8xlarge", "min_size": 0}],
    "placement_group": true
  }
}
-%}
{% set subnet = "subnet-0f45a3009addd0e7f" -%}
{% set scheduler = "slurm" -%}
{% set package_versions = { "parallelcluster": "2.6.0", "cookbook": "aws-parallelcluster-cookbook-2.6.0", "chef": "14.2.0", "ridley": "5.1.1", "berkshelf": "7.0.4", "ami": "dev" } -%}
{% set os = "alinux2" -%}
{% set root_device = "/dev/xvda" -%}

Parameters:
  SNS:
    Type: String
  ComputeSecurityGroup:
    Type: String
  KeyName:
    Type: String
  RootInstanceProfile:
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
  S3Domain:
    Type: String
  RootRole:
    Type: String
  EFSId:
    Type: String
  FSXId:
    Type: String
  SQS:
    Type: String
  MasterServerPrivateDns:
    Type: String
  MainStackName:
    Type: String
Resources:
  {%- for queue, queue_config in queues.items() %}
    {%-for instance_config in queue_config.instances %}
      {%- if instance_config.min_size > 0 %}
  ASG{{ queue }}{{ instance_config.type | replace(".", "") }}:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: '{{ instance_config.min_size | string }}'
      VPCZoneIdentifier:
        - {{ subnet }}
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate{{ queue }}{{ instance_config.type | replace(".", "") }}
        Version: !GetAtt 'LaunchTemplate{{ queue }}{{ instance_config.type | replace(".", "") }}.LatestVersionNumber'
      MinSize: '{{ instance_config.min_size | string }}'
      DesiredCapacity: '{{ instance_config.min_size | string }}'
      NotificationConfigurations:
        - TopicARN: !Ref 'SNS'
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_LAUNCH
      PlacementGroup: {{ 'PlacementGroup' + queue if queue_config.placement_group else '!Ref AWS::NoValue' }}
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '{{ instance_config.min_size | string }}'
      {%- endif %}
  LaunchTemplate{{ queue }}{{ instance_config.type | replace(".", "") }}:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: {{ instance_config.type }}
        NetworkInterfaces:
          - DeviceIndex: 0
            InterfaceType: {{ 'efa' if queue_config.efa else '!Ref AWS::NoValue' }}
            Groups:
              - !Ref 'ComputeSecurityGroup'
            AssociatePublicIpAddress: true
            SubnetId: {{ subnet }}
        KeyName: !Ref 'KeyName'
        IamInstanceProfile:
          Name: !Ref 'RootInstanceProfile'
        ImageId: !Ref 'ImageId'
        Monitoring:
          Enabled: false
        BlockDeviceMappings:
          - DeviceName: /dev/xvdba
            VirtualName: ephemeral0
          - DeviceName: /dev/xvdbb
            VirtualName: ephemeral1
          - DeviceName: /dev/xvdbc
            VirtualName: ephemeral2
          - DeviceName: /dev/xvdbd
            VirtualName: ephemeral3
          - DeviceName: /dev/xvdbe
            VirtualName: ephemeral4
          - DeviceName: /dev/xvdbf
            VirtualName: ephemeral5
          - DeviceName: /dev/xvdbg
            VirtualName: ephemeral6
          - DeviceName: /dev/xvdbh
            VirtualName: ephemeral7
          - DeviceName: /dev/xvdbi
            VirtualName: ephemeral8
          - DeviceName: /dev/xvdbj
            VirtualName: ephemeral9
          - DeviceName: /dev/xvdbk
            VirtualName: ephemeral10
          - DeviceName: /dev/xvdbl
            VirtualName: ephemeral11
          - DeviceName: /dev/xvdbm
            VirtualName: ephemeral12
          - DeviceName: /dev/xvdbn
            VirtualName: ephemeral13
          - DeviceName: /dev/xvdbo
            VirtualName: ephemeral14
          - DeviceName: /dev/xvdbp
            VirtualName: ephemeral15
          - DeviceName: /dev/xvdbq
            VirtualName: ephemeral16
          - DeviceName: /dev/xvdbr
            VirtualName: ephemeral17
          - DeviceName: /dev/xvdbs
            VirtualName: ephemeral18
          - DeviceName: /dev/xvdbt
            VirtualName: ephemeral19
          - DeviceName: /dev/xvdbu
            VirtualName: ephemeral20
          - DeviceName: /dev/xvdbv
            VirtualName: ephemeral21
          - DeviceName: /dev/xvdbw
            VirtualName: ephemeral22
          - DeviceName: /dev/xvdbx
            VirtualName: ephemeral23
          - DeviceName: {{ root_device }}
            Ebs:
              VolumeSize: {{ compute_root_vol_size or 25 }}
              VolumeType: gp2
        UserData:
          Fn::Base64:
            !Sub |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0

            --==BOUNDARY==
            Content-Type: text/cloud-boothook; charset=us-ascii
            MIME-Version: 1.0

            #!/bin/bash -x

            which yum && echo "proxy={{ proxy_server or '_none_' }}" >> /etc/yum.conf || echo "Not yum system"
            which apt-get && echo "Acquire::http::Proxy \"{{ proxy_server or 'false' }}\";" >> /etc/apt/apt.conf || echo "Not apt system"
            proxy={{ proxy_server or "NONE" }}
            if [ ${!proxy} != NONE ]; then
              proxy_host=$(echo "${!proxy}" | awk -F/ '{print $3}' | cut -d: -f1)
              proxy_port=$(echo "${!proxy}" | awk -F/ '{print $3}' | cut -d: -f2)
              echo -e "[Boto]\nproxy = ${!proxy_host}\nproxy_port = ${!proxy_port}\n" > /etc/boto.cfg
              cat >> /etc/profile.d/proxy.sh <<PROXY
            export http_proxy="${!proxy}"
            export https_proxy="${!proxy}"
            export no_proxy="localhost,127.0.0.1,169.254.169.254"
            export HTTP_PROXY="${!proxy}"
            export HTTPS_PROXY="${!proxy}"
            export NO_PROXY="localhost,127.0.0.1,169.254.169.254"
            PROXY
            fi

            --==BOUNDARY==
            Content-Type: text/cloud-config; charset=us-ascii
            MIME-Version: 1.0

            write_files:
            - path: /tmp/dna.json
              permissions: '0644'
              owner: root:root
              content: |
                {
                  "cfncluster": {
                    "stack_name": "${MainStackName}",
                    "enable_efa": "{{ enable_efa or 'false' }}",
                    "cfn_raid_parameters": "{{ raid_options or "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE" }}",
                    "cfn_preinstall": "{{ pre_install or "NONE" }}",
                    "cfn_preinstall_args": "{{ pre_install_args or "NONE" }}",
                    "cfn_postinstall": "{{ post_install or "NONE" }}",
                    "cfn_postinstall_args": "{{ post_install_args or "NONE" }}",
                    "cfn_region": "${AWS::Region}",
                    "cfn_efs": "${EFSId}",
                    "cfn_efs_shared_dir": "{{ efs_options or "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE" }}",
                    "cfn_fsx_fs_id": "${FSXId}",
                    "cfn_fsx_options": "{{ fsx_options or "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE" }}",
                    "cfn_scheduler": "{{ scheduler }}",
                    "cfn_scheduler_slots": "NONE",
                    "cfn_scaledown_idletime": "{{ scaledown_idletime or "10" }}",
                    "cfn_encrypted_ephemeral": "false",
                    "cfn_ephemeral_dir": "/scratch",
                    "cfn_shared_dir": "/shared",
                    "cfn_proxy": "NONE",
                    "cfn_sqs_queue": "${SQS}",
                    "cfn_master": "${MasterServerPrivateDns}",
                    "cfn_node_type": "ComputeFleet",
                    "cfn_cluster_user": "{{ user or "ec2_user" }}",
                    "enable_intel_hpc_platform": "false",
                    "cfn_cluster_cw_logging_enabled": "true"
                  },
                  "run_list": "recipe[aws-parallelcluster::{{ scheduler }}_config]"
                }
            - path: /etc/chef/client.rb
              permissions: '0644'
              owner: root:root
              content: |
                cookbook_path ['/etc/chef/cookbooks']
            - path: /tmp/extra.json
              permissions: '0644'
              owner: root:root
              content: |
                {}

            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset=us-ascii
            MIME-Version: 1.0

            #!/bin/bash -x

            function error_exit
            {
              region=${AWS::Region}
              instance_id=$(curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/instance-id)
              log_dir=/home/logs/compute
              mkdir -p ${!log_dir}
              echo "Reporting instance as unhealthy and dumping logs to ${!log_dir}/${!instance_id}.tar.gz"
              tar -czf ${!log_dir}/${!instance_id}.tar.gz /var/log
              aws --region ${AWS::Region} autoscaling set-instance-health --instance-id ${!instance_id} --health-status Unhealthy
              cfn-signal --exit-code=1 --reason="$1" --stack="${AWS::StackName}" --resource=ASG{{ queue }}{{ instance_config.type | replace(".", "") }} --region=${AWS::Region}
              exit 1
            }
            function vendor_cookbook
            {
              mkdir /tmp/cookbooks
              cd /tmp/cookbooks
              tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz
              HOME_BAK="${!HOME}"
              export HOME="/tmp"
              for d in `ls /tmp/cookbooks`; do
                cd /tmp/cookbooks/$d
                LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete || error_exit 'Vendoring cookbook failed.'
              done;
              export HOME="${!HOME_BAK}"
            }
            function bootstrap_instance
            {
              which yum 2>/dev/null; yum=$?
              which apt-get 2>/dev/null; apt=$?
              if [ "${!yum}" == "0" ]; then
                yum -y groupinstall development && yum -y install curl wget jq awscli
              fi
              if [ "${!apt}" == "0" ]; then
                apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq python-setuptools awscli
              fi
              [[ ${!_region} =~ ^cn- ]] && s3_url="cn-north-1.amazonaws.com.cn/cn-north-1-aws-parallelcluster"
              which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${S3Domain}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)
              mkdir -p /etc/chef && chown -R root:root /etc/chef
              curl --retry 3 -L https://www.chef.io/chef/install.sh | bash -s -- -v ${!chef_version}
              /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${!ridley_version} berkshelf:${!berkshelf_version} ffi-libarchive
              curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${!cookbook_url}
              curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${!cookbook_url}.date
              curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${!cookbook_url}.md5
              vendor_cookbook
              mkdir /opt/parallelcluster && echo ${!parallelcluster_version} | tee /opt/parallelcluster/.bootstrapped
            }
            [ -f /etc/profile.d/proxy.sh ] && . /etc/profile.d/proxy.sh
            custom_cookbook={{ custom_chef_cookbook or "NONE" }}
            export _region=${AWS::Region}
            s3_url=${S3Domain}

            if [ "{{ custom_chef_cookbook or "NONE" }}" != "NONE" ]; then
              cookbook_url={{ custom_chef_cookbook or "NONE" }}
            else
              cookbook_url=https://s3.${!_region}.${S3Domain}/${!_region}-aws-parallelcluster/cookbooks/{{ package_versions.cookbook }}.tgz
            fi
            export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
            export parallelcluster_version=aws-parallelcluster-{{ package_versions.parallelcluster }}
            export cookbook_version={{ package_versions.cookbook }}
            export chef_version={{ package_versions.chef }}
            export ridley_version={{ package_versions.ridley }}
            export berkshelf_version={{ package_versions.berkshelf }}

            if [ -f /opt/parallelcluster/.bootstrapped ]; then
              installed_version=$(cat /opt/parallelcluster/.bootstrapped)
              if [ "${!parallelcluster_version}" != "${!installed_version}" ]; then
                bootstrap_instance
              fi
            else
              bootstrap_instance
            fi
            if [ "${!custom_cookbook}" != "NONE" ]; then
              curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z "$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)" ${!cookbook_url}
              vendor_cookbook
            fi
            cd /tmp

            while [ "${!masterServerStatus}" != "CREATE_COMPLETE" ] && [ "${!masterServerStatus}" != "UPDATE_COMPLETE" ]
            do
              sleep 3
              masterServerStatus=$(aws cloudformation describe-stack-resource --stack-name ${MainStackName} --logical-resource-id MasterServerWaitCondition --region ${AWS::Region} --query StackResourceDetail.ResourceStatus --output text 2>/dev/null)
            done

            # Former cfn-init
            || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'
            mkdir -p /etc/chef/ohai/hints
            touch /etc/chef/ohai/hints/ec2.json
            jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json || ( echo "jq not installed"; cp /tmp/dna.json /etc/chef/dna.json)
            pushd /etc/chef; chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env; popd
            /opt/parallelcluster/scripts/fetch_and_run -preinstall
            pushd /etc/chef; chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json; popd
            /opt/parallelcluster/scripts/fetch_and_run -postinstall
            pushd /etc/chef; chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::finalize; popd

            # Signal completion
            cfn-signal --exit-code=0 --reason="ComputeServer setup complete" --stack=${AWS::StackName} --resource=ASG{{ queue }}{{ instance_config.type | replace(".", "") }} --region=${AWS::Region}

            # End of file
            --==BOUNDARY==
    {%- endfor %}
  {%- endfor %}
  {%- for queue, queue_config in queues.items() %}
    {%- if queue_config.placement_group > 0 %}
  PlacementGroup{{ queue }}:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: cluster
    {%- endif %}
  {%- endfor %}
